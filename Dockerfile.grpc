# Step 1: Build the Go application
FROM golang:1.23-alpine AS build

# Set environment variables for Go modules
ENV GO111MODULE=on
ENV GOPROXY=https://proxy.golang.org,direct

# Set the correct architecture for the target platform
ARG TARGETOS=linux
ARG TARGETARCH=amd64
ENV GOOS=$TARGETOS
ENV GOARCH=$TARGETARCH

# Install required tools
RUN apk add --no-cache git build-base curl

# Set the working directory
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download Go module dependencies
RUN go mod download

# Copy the application source code
COPY . .

# Build the application, targeting the correct architecture (amd64)
WORKDIR /app/grpc_server
RUN CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -o main .

# Step 2: Create a smaller image for running the application
FROM alpine:latest

# Set the working directory
WORKDIR /root/

# Copy the compiled binary from the build stage
COPY --from=build /app/grpc_server/main .


# Ensure the binary has executable permissions
RUN chmod +x ./main
RUN wget -qO/bin/grpc_health_probe https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.3.1/grpc_health_probe-linux-amd64 && \
    chmod +x /bin/grpc_health_probe

# Expose gRPC server port and grpc metrics
EXPOSE 50051 9092
# Run the application
CMD ["./main"]